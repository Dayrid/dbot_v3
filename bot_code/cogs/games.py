import discord
from asyncio import run_coroutine_threadsafe
from discord.ext import commands
from discord import FFmpegPCMAudio
from discord.utils import get
import random
import config


class Games(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.game_queue = []
        self.gamer_stats = {}

    @commands.command(pass_context=True, no_pm=True,
                      brief='>rr add Adds you to russian rulette game.')
    async def rr(self, ctx, arg: str):
        if arg == 'add':
            if ctx.author in self.game_queue:
                await ctx.send('–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!üòä', delete_after=10.0)
            else:
                self.game_queue.append(ctx.author)
                await ctx.send("–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤ –∏–≥—Ä–µ!üëç")
            config.wlog('add', ctx)
        elif arg == 'play':
            if self.game_queue == []:
                await ctx.send('–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏ >rr add!', delete_after=10.0)
            else:
                for player in self.game_queue:
                    await ctx.send(f'–ò–≥—Ä–æ–∫ {player.name} –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —É–¥–∞—á—É!')
                    attempt = random.randint(1, 6)
                    print(f'[Russian Rulette]{player.name} rolled {attempt}!')
                    if attempt in {1, 2}:
                        await ctx.send(f'{player.name} —É–º–µ—Äü•∫')
                    # await player.kick(reason = 'You lose!')
                    else:
                        await ctx.send(f'–ü—Ä–æ–º–∞—Ö! {player.name} –µ—â–µ –∂–∏–≤–æ–π!üî•')
                self.game_queue.clear()
            config.wlog('play', ctx)
        elif arg == 'clean':
            if self.game_queue == []:
                await ctx.message.delete()
            else:
                self.game_queue.clear()
                ctx.send('–û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.', delete_after=10.0)
        else:
            await ctx.message.delete()
            await ctx.send('–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', delete_after=10.0)

    @commands.command(pass_context=True)
    async def flip(self, ctx):
        await ctx.send('–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É. –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã–ø–∞–ª–æ...')
        attempt = random.randint(1, 2)
        if attempt == 1:
            await ctx.send('–í—ã–ø–∞–ª –û—Ä—ë–ª!')
        else:
            await ctx.send('–í—ã–ø–∞–ª–∞ –†–µ—à–∫–∞!')
        config.wlog('flip', ctx)

    @commands.command(pass_context=True)
    async def dice(self, ctx):
        await ctx.send('–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ—Å—Ç–∏...')
        attempt1 = random.randint(1, 6)
        attempt2 = random.randint(1, 6)
        if attempt2 == attempt1:
            await ctx.send('–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –≤–∞–º –≤—ã–ø–∞–ª –¥—É–±–ª—å!')
            await ctx.send(f'{attempt1}, {attempt2}')
        else:
            await ctx.send(f'–í–∞–º –≤—ã–ø–∞–ª–æ: {attempt1}, {attempt2}')
        config.wlog('dice', ctx)

    @commands.command(pass_context=True)
    async def knb(self, ctx, arg):
        arg = arg.lower()
        answerlist = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']
        answer = random.choice(answerlist)
        await ctx.send(f'–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ - {arg}, —è - {answer}.')
        if (arg == '–∫–∞–º–µ–Ω—å' and answer == '–∫–∞–º–µ–Ω—å') or (arg == '–Ω–æ–∂–Ω–∏—Ü—ã' and answer == '–Ω–æ–∂–Ω–∏—Ü—ã') or (
                arg == '–±—É–º–∞–≥–∞' and answer == '–±—É–º–∞–≥–∞'):
            await ctx.send('–ù–∏—á—å—è!')
        elif (arg == '–∫–∞–º–µ–Ω—å' and answer == '–Ω–æ–∂–Ω–∏—Ü—ã') or (arg == '–Ω–æ–∂–Ω–∏—Ü—ã' and answer == '–±—É–º–∞–≥–∞') or (
                arg == '–±—É–º–∞–≥–∞' and answer == '–∫–∞–º–µ–Ω—å'):
            await ctx.send('–í—ã –ø–æ–±–µ–¥–∏–ª–∏!')
        elif (arg == '–∫–∞–º–µ–Ω—å' and answer == '–±—É–º–∞–≥–∞') or (arg == '–Ω–æ–∂–Ω–∏—Ü—ã' and answer == '–∫–∞–º–µ–Ω—å') or (
                arg == '–±—É–º–∞–≥–∞' and answer == '–Ω–æ–∂–Ω–∏—Ü—ã'):
            await ctx.send('–Ø –ø–æ–±–µ–¥–∏–ª!')
        else:
            await ctx.send('–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω –∞–≥—Ä—É–º–µ–Ω—Ç.')
        config.wlog('knb', ctx)


def setup(bot):
    bot.add_cog(Games(bot))
